{"version":3,"file":"static/webpack/static/development/pages/index.js.cc9bb07b549aec761a0a.hot-update.js","sources":["webpack:///./lib/quickTypeLib.ts"],"sourcesContent":["import {\n  InputData,\n  jsonInputForTargetLanguage,\n  quicktype,\n} from 'quicktype-core';\n\nexport async function quicktypeJSON(targetLanguage: string, typeName: string, jsonString: string) {\n  const jsonInput = jsonInputForTargetLanguage(targetLanguage);\n\n  // We could add multiple samples for the same desired\n  // type, or many sources for other types. Here we're\n  // just making one type from one piece of sample JSON.\n  await jsonInput.addSource({\n    name: typeName,\n    samples: [jsonString],\n  });\n\n  const inputData = new InputData();\n  inputData.addInput(jsonInput);\n\n  return quicktype({\n    inputData,\n    lang: targetLanguage,\n    combineClasses: true,\n    allPropertiesOptional: false,\n    inferEnums: false,\n    inferUuids: false,\n    inferIntegerStrings: false,\n    inferDateTimes: true,\n    inferBooleanStrings: false,\n    rendererOptions: {\n      'array-type': 'list',\n      features: 'attributes-only',\n    },\n  });\n}\n\nexport async function quickTypeGen({ prefix, jsonString }: { prefix: string; jsonString: string }): Promise<string> {\n  const result = await quicktypeJSON(\n    'csharp',\n    prefix,\n    jsonString,\n  );\n  let text = result.lines.join('\\n');\n  text = text.replace(/JsonProperty\\(\"/g, 'JsonPropertyName(\"');\n  text = text.replace(/public partial class/g, 'public class');\n  text = text.replace(/namespace QuickType\\s+{/, '');\n  text = text.replace(/}\\s*$/, '');\n  text = text.replace(/using \\S+;/g, '');\n  text = text.replace(/, NullValueHandling = NullValueHandling.Ignore/g, '');\n  text = text.replace(/public (\\S+) (\\S+) {/g, 'public $1? $2 {');\n  text = text.replace(/\\?\\?/g, '?');\n  text = text.replace(/public Uri/g, 'public string');\n\n  const classNameRegex = /public class (\\S+)/g;\n  // text = text.replace(classNameRegex, `public class ${prefix}$1`);\n\n  let m;\n  while ((m = classNameRegex.exec(text)) !== null) {\n    // if (m.index === classNameRegex.lastIndex) classNameRegex.lastIndex += 1;\n    const className = m[1];\n    if (className.startsWith(prefix)) continue;\n    text = text.replace(new RegExp(`\\\\b${className}\\\\b`, 'g'), `${prefix}${className}`);\n  }\n\n  text = text.trim();\n  return text;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AANA;AAAA;AAOA;AACA;AAFA;AACA;AAPA;AAWA;AACA;AAZA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAVA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AACA;AAqBA;AACA;AACA;AAxBA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAyBA;AAzBA;AAAA;AACA;AADA;AA4BA;AA5BA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}