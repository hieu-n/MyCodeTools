{"version":3,"file":"static/webpack/static/development/pages/index.js.f01d0446c53d415e91e0.hot-update.js","sources":["webpack:///./pages/index.tsx"],"sourcesContent":["import React, { ChangeEvent } from 'react';\nimport Head from 'next/head';\nimport { quickTypeGen } from '../lib/quickTypeLib';\n\n\nexport default (): React.ReactElement => {\n  const [jsonString, setJsonString] = React.useState('');\n  const [csCode, setCsCode] = React.useState('// Waiting ...');\n  const [prefix, setPrefix] = React.useState('CsCode');\n\n  return (\n    <>\n      <Head>\n        <title>MyCodeTools</title>\n\n        <meta charSet=\"utf-8\"/>\n        <meta name=\"viewport\"\n              content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"/>\n      </Head>\n      <div className=\"container-fluid vh-100\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <p>Generate C Classes from JSON. Support the new JSON library: <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=netcore-3.1\">System.Text.Json</a>.</p>\n          </div>\n        </div>\n        <div className=\"row vh-100\">\n          <div className=\"col-6 vh-100\">\n            <div className=\"form-group vh-100 d-flex flex-column\">\n              <form className=\"form-inline\">\n                <label htmlFor=\"prefix\">Class name</label>\n                <input type=\"text\" className=\"form-control\" id=\"prefix\" value={prefix} onChange={async (event): Promise<void> => {\n                  setPrefix(event.currentTarget.value);\n                  console.log(prefix);\n                  setCsCode(await quickTypeGen({ prefix, jsonString }));\n                }}/>\n              </form>\n              <label htmlFor=\"exampleFormControlTextarea1\">Input Json here:</label>\n              <textarea className=\"form-control flex-grow-1\" id=\"exampleFormControlTextarea1\"\n                        onChange={async (event): Promise<void> => {\n                          setJsonString(event.currentTarget.value);\n                          setCsCode(await quickTypeGen({ prefix, jsonString: event.currentTarget.value }));\n                        }}></textarea>\n            </div>\n          </div>\n          <div className=\"col-6 vh-100\">\n            <div className=\"form-group vh-100 d-flex flex-column\">\n              <label htmlFor=\"csClass\">C# Class:</label>\n              <textarea className=\"form-control flex-grow-1\" id=\"csClass\" value={csCode} readOnly></textarea>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;A","sourceRoot":""}